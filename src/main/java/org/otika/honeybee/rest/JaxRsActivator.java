package org.otika.honeybee.rest;

import java.util.Set;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

/**
 * A class extending {@link Application} and annotated with @ApplicationPath is the Java EE 6
 * "no XML" approach to activating JAX-RS.
 * 
 * <p>
 * Resources are served relative to the servlet path specified in the {@link ApplicationPath}
 * annotation.
 * </p>
 */
@ApplicationPath("/rest")
public class JaxRsActivator extends Application {

    @Override
    public Set<Class<?>> getClasses() {
        Set<Class<?>> resources = new java.util.HashSet<Class<?>>();
        addRestResourceClasses(resources);
        return resources;
    }

    /**
     * Do not modify addRestResourceClasses() method.
     * It is automatically re-generated by NetBeans REST support to populate
     * given list with all resources defined in the project.
     */
    private void addRestResourceClasses(Set<Class<?>> resources) {
        resources.add(org.otika.honeybee.rest.AuthorEndpoint.class);
        resources.add(org.otika.honeybee.rest.BodypartEndpoint.class);
        resources.add(org.otika.honeybee.rest.DefectEndpoint.class);
        resources.add(org.otika.honeybee.rest.EnduserEndpoint.class);
        resources.add(org.otika.honeybee.rest.HelpEndpoint.class);
        resources.add(org.otika.honeybee.rest.HoneyEndpoint.class);
        resources.add(org.otika.honeybee.rest.IngredientEndpoint.class);
        resources.add(org.otika.honeybee.rest.LanguageEndpoint.class);
        resources.add(org.otika.honeybee.rest.PlantEndpoint.class);
        resources.add(org.otika.honeybee.rest.PrescriptionEndpoint.class);
        resources.add(org.otika.honeybee.rest.StoreEndpoint.class);
        resources.add(org.otika.honeybee.rest.SubstanceEndpoint.class);
        resources.add(org.otika.honeybee.rest.UsergroupEndpoint.class);
        resources.add(org.otika.honeybee.rest.VirtueEndpoint.class);
        resources.add(org.otika.honeybee.rest.WitnessEndpoint.class);
    }
}
